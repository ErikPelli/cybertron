// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zeroshot/v1/zeroshot.proto

package zeroshotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZeroShotServiceClient is the client API for ZeroShotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeroShotServiceClient interface {
	Classify(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyResponse, error)
}

type zeroShotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZeroShotServiceClient(cc grpc.ClientConnInterface) ZeroShotServiceClient {
	return &zeroShotServiceClient{cc}
}

func (c *zeroShotServiceClient) Classify(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyResponse, error) {
	out := new(ClassifyResponse)
	err := c.cc.Invoke(ctx, "/zeroshot.v1.ZeroShotService/Classify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeroShotServiceServer is the server API for ZeroShotService service.
// All implementations must embed UnimplementedZeroShotServiceServer
// for forward compatibility
type ZeroShotServiceServer interface {
	Classify(context.Context, *ClassifyRequest) (*ClassifyResponse, error)
	mustEmbedUnimplementedZeroShotServiceServer()
}

// UnimplementedZeroShotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZeroShotServiceServer struct {
}

func (UnimplementedZeroShotServiceServer) Classify(context.Context, *ClassifyRequest) (*ClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Classify not implemented")
}
func (UnimplementedZeroShotServiceServer) mustEmbedUnimplementedZeroShotServiceServer() {}

// UnsafeZeroShotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeroShotServiceServer will
// result in compilation errors.
type UnsafeZeroShotServiceServer interface {
	mustEmbedUnimplementedZeroShotServiceServer()
}

func RegisterZeroShotServiceServer(s grpc.ServiceRegistrar, srv ZeroShotServiceServer) {
	s.RegisterService(&ZeroShotService_ServiceDesc, srv)
}

func _ZeroShotService_Classify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroShotServiceServer).Classify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeroshot.v1.ZeroShotService/Classify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroShotServiceServer).Classify(ctx, req.(*ClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZeroShotService_ServiceDesc is the grpc.ServiceDesc for ZeroShotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZeroShotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zeroshot.v1.ZeroShotService",
	HandlerType: (*ZeroShotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Classify",
			Handler:    _ZeroShotService_Classify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeroshot/v1/zeroshot.proto",
}
