// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: text2text/v1/text2text.proto

package text2textv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Text2TextServiceClient is the client API for Text2TextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Text2TextServiceClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type text2TextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewText2TextServiceClient(cc grpc.ClientConnInterface) Text2TextServiceClient {
	return &text2TextServiceClient{cc}
}

func (c *text2TextServiceClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, "/text2text.v1.Text2TextService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Text2TextServiceServer is the server API for Text2TextService service.
// All implementations must embed UnimplementedText2TextServiceServer
// for forward compatibility
type Text2TextServiceServer interface {
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	mustEmbedUnimplementedText2TextServiceServer()
}

// UnimplementedText2TextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedText2TextServiceServer struct {
}

func (UnimplementedText2TextServiceServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedText2TextServiceServer) mustEmbedUnimplementedText2TextServiceServer() {}

// UnsafeText2TextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Text2TextServiceServer will
// result in compilation errors.
type UnsafeText2TextServiceServer interface {
	mustEmbedUnimplementedText2TextServiceServer()
}

func RegisterText2TextServiceServer(s grpc.ServiceRegistrar, srv Text2TextServiceServer) {
	s.RegisterService(&Text2TextService_ServiceDesc, srv)
}

func _Text2TextService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Text2TextServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/text2text.v1.Text2TextService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Text2TextServiceServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Text2TextService_ServiceDesc is the grpc.ServiceDesc for Text2TextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Text2TextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text2text.v1.Text2TextService",
	HandlerType: (*Text2TextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _Text2TextService_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "text2text/v1/text2text.proto",
}
