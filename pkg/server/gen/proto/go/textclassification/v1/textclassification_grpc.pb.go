// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: textclassification/v1/textclassification.proto

package textclassificationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextClassificationService_Classify_FullMethodName = "/textclassification.v1.TextClassificationService/Classify"
)

// TextClassificationServiceClient is the client API for TextClassificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextClassificationServiceClient interface {
	Classify(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyResponse, error)
}

type textClassificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextClassificationServiceClient(cc grpc.ClientConnInterface) TextClassificationServiceClient {
	return &textClassificationServiceClient{cc}
}

func (c *textClassificationServiceClient) Classify(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyResponse, error) {
	out := new(ClassifyResponse)
	err := c.cc.Invoke(ctx, TextClassificationService_Classify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextClassificationServiceServer is the server API for TextClassificationService service.
// All implementations must embed UnimplementedTextClassificationServiceServer
// for forward compatibility
type TextClassificationServiceServer interface {
	Classify(context.Context, *ClassifyRequest) (*ClassifyResponse, error)
	mustEmbedUnimplementedTextClassificationServiceServer()
}

// UnimplementedTextClassificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextClassificationServiceServer struct {
}

func (UnimplementedTextClassificationServiceServer) Classify(context.Context, *ClassifyRequest) (*ClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Classify not implemented")
}
func (UnimplementedTextClassificationServiceServer) mustEmbedUnimplementedTextClassificationServiceServer() {
}

// UnsafeTextClassificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextClassificationServiceServer will
// result in compilation errors.
type UnsafeTextClassificationServiceServer interface {
	mustEmbedUnimplementedTextClassificationServiceServer()
}

func RegisterTextClassificationServiceServer(s grpc.ServiceRegistrar, srv TextClassificationServiceServer) {
	s.RegisterService(&TextClassificationService_ServiceDesc, srv)
}

func _TextClassificationService_Classify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextClassificationServiceServer).Classify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextClassificationService_Classify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextClassificationServiceServer).Classify(ctx, req.(*ClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextClassificationService_ServiceDesc is the grpc.ServiceDesc for TextClassificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextClassificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textclassification.v1.TextClassificationService",
	HandlerType: (*TextClassificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Classify",
			Handler:    _TextClassificationService_Classify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "textclassification/v1/textclassification.proto",
}
